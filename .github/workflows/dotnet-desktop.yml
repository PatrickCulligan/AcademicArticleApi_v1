name: .NET CI + SonarCloud

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-and-analyze:
    runs-on: ubuntu-latest
    steps:
      # 1) Checkout source code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2) Install Java 17 for SonarScanner
      - name: Setup Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # 3) Install .NET 8 SDK
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      # 4) Prepare SonarCloud analysis
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          projectBaseDir: .
          args: >
            -Dsonar.organization=x00218712
            -Dsonar.projectKey=x00218712_article
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # 5) Restore NuGet packages
      - name: Restore dependencies
        run: dotnet restore

      # 6) Build in Release configuration
      - name: Build project
        run: dotnet build --no-restore --configuration Release

      # 7) Run unit tests
      - name: Run tests
        run: dotnet test --no-restore --verbosity normal

      # 8) Publish SonarCloud Quality Gate result
      - name: SonarCloud Publish & Quality Gate
        if: always()
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          projectBaseDir: .
          args: >
            -Dsonar.organization=x00218712
            -Dsonar.projectKey=x00218712_article
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  dependency_check:
    runs-on: ubuntu-latest
    steps:
      # A) Checkout source code
      - name: Checkout repository
        uses: actions/checkout@v4

      # B) Run OWASP Dependency-Check
      - name: Dependency-Check Scan
        uses: dependency-check/Dependency-Check_Action@main
        id: Depcheck
        with:
          project: 'AcademicArticleApi'
          path: '.'
          format: 'HTML'
          args: >
            --failOnCVSS 8
      # C) Upload the generated report
      - name: Upload Dependency-Check report
        uses: actions/upload-artifact@v4
        with:
          name: Dependency-Check Report
          path: ${{ github.workspace }}/reports
